services:
  postgres-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: spectra_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d spectra_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
      # Add this line to fix the cookie permission issue
      RABBITMQ_ERLANG_COOKIE: 'a-very-long-and-secure-random-string-for-cookie'
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # Management interface
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  spectra-tag-manager:
    build:
      context: ./services/spectra-tag-manager
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/spectra_db
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
      SERVER_PORT: 8080
      WAIT_HOSTS: postgres-db:5432
      WAIT_HOSTS_TIMEOUT: 300
      WAIT_SLEEP_INTERVAL: 5
      WAIT_HOST_CONNECT_TIMEOUT: 30
      SPRING_JPA_OPEN_IN_VIEW: "true"  # keep session open for serialization
      SPRING_JPA_PROPERTIES_HIBERNATE_ENABLE_LAZY_LOAD_NO_TRANS: "true"  # allow lazy load without tx
    ports:
      - "8080:8080"  # Expose for development/testing
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  spectra-api-gateway:
    build:
      context: ./services/spectra-api-gateway
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: 8081
      SPRING_RABBITMQ_HOST: rabbitmq
      TAG_MANAGER_URL: http://spectra-tag-manager:8080
      # Add these configurations for Feign client
      SPRING_CLOUD_OPENFEIGN_CLIENT_CONFIG_DEFAULT_CONNECTTIMEOUT: 5000
      SPRING_CLOUD_OPENFEIGN_CLIENT_CONFIG_DEFAULT_READTIMEOUT: 5000
    ports:
      - "8081:8081"  # Expose to host for external access
    depends_on:
      rabbitmq:
        condition: service_healthy
      spectra-tag-manager:
        condition: service_healthy
    volumes:
      - image_storage:/tmp/spectra/images
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  spectra-image-processor:
    build:
      context: ./services/spectra-image-processor
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: 8082
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - image_storage:/tmp/spectra/images

  spectra-ai-tagging-service:
    build:
      context: ./services/spectra-ai-tagging-service
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      TAG_MANAGER_URL: http://spectra-tag-manager:8080
      STORAGE_BASE_URL: http://spectra-api-gateway:8081/api/images/content
    volumes:
      - ml_models:/app/models  # Persist downloaded ML models
      - image_storage:/tmp/spectra/images # Mount shared image volume
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]  # Enable if GPU is available
    depends_on:
      rabbitmq:
        condition: service_healthy
      spectra-tag-manager:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - spectra-api-gateway
volumes:
  postgres_data: {}  # Persist PostgreSQL data
  rabbitmq_data: {} # Persist RabbitMQ data
  ml_models: {}     # Persist ML models
  image_storage: {}  # Shared volume for images

networks:
  default:
    name: spectra-network
    driver: bridge